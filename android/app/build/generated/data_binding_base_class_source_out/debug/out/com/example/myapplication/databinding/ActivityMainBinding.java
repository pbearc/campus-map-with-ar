// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout container;

  @NonNull
  public final EditText curPoint;

  @NonNull
  public final Button deleteButton;

  @NonNull
  public final TextView one;

  @NonNull
  public final TextView oneI;

  @NonNull
  public final TextView prediction;

  @NonNull
  public final TextView predictionI;

  @NonNull
  public final Switch recordToDatabase;

  @NonNull
  public final TextView three;

  @NonNull
  public final TextView threeI;

  @NonNull
  public final TextView two;

  @NonNull
  public final TextView twoI;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout container, @NonNull EditText curPoint, @NonNull Button deleteButton,
      @NonNull TextView one, @NonNull TextView oneI, @NonNull TextView prediction,
      @NonNull TextView predictionI, @NonNull Switch recordToDatabase, @NonNull TextView three,
      @NonNull TextView threeI, @NonNull TextView two, @NonNull TextView twoI) {
    this.rootView = rootView;
    this.container = container;
    this.curPoint = curPoint;
    this.deleteButton = deleteButton;
    this.one = one;
    this.oneI = oneI;
    this.prediction = prediction;
    this.predictionI = predictionI;
    this.recordToDatabase = recordToDatabase;
    this.three = three;
    this.threeI = threeI;
    this.two = two;
    this.twoI = twoI;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout container = (ConstraintLayout) rootView;

      id = R.id.cur_point;
      EditText curPoint = ViewBindings.findChildViewById(rootView, id);
      if (curPoint == null) {
        break missingId;
      }

      id = R.id.delete_button;
      Button deleteButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteButton == null) {
        break missingId;
      }

      id = R.id.one;
      TextView one = ViewBindings.findChildViewById(rootView, id);
      if (one == null) {
        break missingId;
      }

      id = R.id.one_i;
      TextView oneI = ViewBindings.findChildViewById(rootView, id);
      if (oneI == null) {
        break missingId;
      }

      id = R.id.prediction;
      TextView prediction = ViewBindings.findChildViewById(rootView, id);
      if (prediction == null) {
        break missingId;
      }

      id = R.id.prediction_i;
      TextView predictionI = ViewBindings.findChildViewById(rootView, id);
      if (predictionI == null) {
        break missingId;
      }

      id = R.id.record_to_database;
      Switch recordToDatabase = ViewBindings.findChildViewById(rootView, id);
      if (recordToDatabase == null) {
        break missingId;
      }

      id = R.id.three;
      TextView three = ViewBindings.findChildViewById(rootView, id);
      if (three == null) {
        break missingId;
      }

      id = R.id.three_i;
      TextView threeI = ViewBindings.findChildViewById(rootView, id);
      if (threeI == null) {
        break missingId;
      }

      id = R.id.two;
      TextView two = ViewBindings.findChildViewById(rootView, id);
      if (two == null) {
        break missingId;
      }

      id = R.id.two_i;
      TextView twoI = ViewBindings.findChildViewById(rootView, id);
      if (twoI == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, container, curPoint, deleteButton,
          one, oneI, prediction, predictionI, recordToDatabase, three, threeI, two, twoI);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
